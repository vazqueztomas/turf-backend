[build-system]
requires = ["setuptools"]

[project]
name = "turf-backend"
requires-python = ">= 3.8"
dynamic = ["version", "readme"]
authors = [{ name = 'Tomas Vazquez', email = "vazquezt2018@gmail.com" }]
description = "Turf Backend API"

[project.urls]
Homepage = "https://localhost:3000"
Repository = "https://github.com/vazqueztomas/turf-backend"

######################
# coverage configuration #
######################
[tool.coverage.run]
source = [
    "core",
    "database",
    "models",
    "services",
    "routes",
    "schemas"
]
[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self\\.debug",

    "raise AssertionError",
    "raise NotImplementedError",

    "if 0:",
    "if __name__ == .__main__.:",

    "@(abc\\.)?abstractmethod",
    ]


[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.html]
directory = "htmlcov"
title = "Coverage Report"

######################
# ruff configuration #
######################

[tool.ruff]
fix = true
preview = true
exclude = [
    ".git",
    ".mypy_cache",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "_build",
    "buck-out",
    "build",
    "dist",
    "site-packages",
    "venv",
    "playground"
]


[tool.ruff.lint]
extend-select = [
    "FBT",
    "COM",
    "E",
    "UP",
    "BLE",
    "B",
    'A',
    'C4',
    'ICN',
    'PIE',
    'RSE',
    'SIM',
    'ARG',
    'G',
    'ISC',
    'T20',
    'EM',
    'SLF',
    'PT',
    'RET',
    'TID',
    'PTH',
    'LOG',
    'TD',
    'FIX',
    'TRY',
    'I',
    'ERA',
    'PERF',
    'FURB',
    'RUF',
]
ignore = ["COM812", "ISC001", "TD003", "FIX002"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

######################
# pylint configuration #
######################

[tool.pylint.main]
load-plugins = [
    "pylint.extensions.bad_builtin",
    "pylint.extensions.code_style",
    "pylint.extensions.comparison_placement",
    "pylint.extensions.consider_refactoring_into_while_condition",
    "pylint.extensions.dunder",
    "pylint.extensions.eq_without_hash",
    "pylint.extensions.for_any_all",
    "pylint.extensions.mccabe",
    "pylint.extensions.no_self_use",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.private_import",
    "pylint.extensions.redefined_loop_name",
    "pylint.extensions.set_membership",
]

[tool.pylint."MESSAGES CONTROL"]
fail-on = ["I"]
fail-under = '10'
ignore = ['.git', 'playground.py', "playground/*"]
ignore-patterns = ''
jobs = 4
limit-inference-results = 100
confidence = ''
disable = '''print-statement,
        parameter-unpacking,
        unpacking-in-except,
        old-raise-syntax,
        backtick,
        long-suffix,
        old-ne-operator,
        old-octal-literal,
        import-star-module-level,
        non-ascii-bytes-literal,
        raw-checker-failed,
        bad-inline-option,
        locally-disabled,
        file-ignored,
        suppressed-message,
        useless-suppression,
        deprecated-pragma,
        use-symbolic-message-instead,
        apply-builtin,
        basestring-builtin,
        buffer-builtin,
        cmp-builtin,
        coerce-builtin,
        execfile-builtin,
        file-builtin,
        long-builtin,
        raw_input-builtin,
        reduce-builtin,
        standarderror-builtin,
        unicode-builtin,
        xrange-builtin,
        coerce-method,
        delslice-method,
        getslice-method,
        setslice-method,
        no-absolute-import,
        old-division,
        dict-iter-method,
        dict-view-method,
        next-method-called,
        metaclass-assignment,
        indexing-exception,
        raising-string,
        reload-builtin,
        oct-method,
        hex-method,
        nonzero-method,
        cmp-method,
        input-builtin,
        round-builtin,
        intern-builtin,
        unichr-builtin,
        map-builtin-not-iterating,
        zip-builtin-not-iterating,
        range-builtin-not-iterating,
        filter-builtin-not-iterating,
        using-cmp-argument,
        eq-without-hash,
        div-method,
        idiv-method,
        rdiv-method,
        exception-message-attribute,
        invalid-str-codec,
        sys-max-int,
        bad-python3-import,
        deprecated-string-function,
        deprecated-str-translate-call,
        deprecated-itertools-function,
        deprecated-types-field,
        next-method-defined,
        dict-items-not-iterating,
        dict-keys-not-iterating,
        dict-values-not-iterating,
        deprecated-operator-function,
        deprecated-urllib-function,
        xreadlines-attribute,
        deprecated-sys-function,
        exception-escape,
        comprehension-escape,
        missing-module-docstring,
        missing-class-docstring,
        missing-function-docstring,
        W,
        R0201,
        useless-option-value,
'''
enable = 'c-extension-no-member'
[tool.pylint.REPORTS]
evaluation = '10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)'
output-format = 'text'
reports = 'no'
score = 'yes'
[tool.pylint.REFACTORING]

max-nested-blocks = 5
never-returning-functions = 'sys.exit'
[tool.pylint.LOGGING]

logging-format-style = 'old'
logging-modules = 'logging'
[tool.pylint.SPELLING]
max-spelling-suggestions = 4
spelling-dict = ''
spelling-ignore-words = ''
spelling-private-dict-file = ''
spelling-store-unknown-words = 'no'
[tool.pylint.MISCELLANEOUS]
notes = '''FIXME,
      XXX,
      TODO
'''
[tool.pylint.TYPECHECK]
contextmanager-decorators = 'contextlib.contextmanager'
generated-members = ''
ignore-mixin-members = 'yes'
ignore-none = 'yes'
ignore-on-opaque-inference = 'yes'
ignored-classes = 'optparse.Values,thread._local,_thread._local'

ignored-modules = ''
missing-member-hint = 'yes'
missing-member-hint-distance = 1
missing-member-max-choices = 1
signature-mutators = ''
[tool.pylint.VARIABLES]
additional-builtins = ''
allow-global-unused-variables = 'yes'
callbacks = '''cb_,
          _cb
'''
dummy-variables-rgx = '_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_'
ignored-argument-names = '_.*|^ignored_|^unused_'
init-import = 'no'
redefining-builtins-modules = 'six.moves,past.builtins,future.builtins,builtins,io'
[tool.pylint.FORMAT]
expected-line-ending-format = ''

ignore-long-lines = '^\s*(# )?<?https?://\S+>?$'
indent-after-paren = 4
indent-string = '    '

max-line-length = 120
max-module-lines = 1000
single-line-class-stmt = 'no'
single-line-if-stmt = 'no'
[tool.pylint.SIMILARITIES]

ignore-comments = 'yes'

ignore-docstrings = 'yes'
ignore-imports = 'no'
min-similarity-lines = 4


[tool.pylint.BASIC]
argument-naming-style = 'snake_case'
attr-naming-style = 'snake_case'
bad-names = '''foo,
          bar,
          baz,
          toto,
          tutu,
          tata
'''
bad-names-rgxs = ''
class-attribute-naming-style = 'any'
class-naming-style = 'PascalCase'
const-naming-style = 'UPPER_CASE'
docstring-min-length = -1
function-naming-style = 'snake_case'
good-names = '''i,
           j,
           k,
           ex,
           Run,
           pk,
           fd,
           x,
           y,
           _
'''

good-names-rgxs = ''
include-naming-hint = 'no'
inlinevar-naming-style = 'any'

method-naming-style = 'snake_case'
module-naming-style = 'snake_case'
name-group = ''
no-docstring-rgx = '^_'
property-classes = 'abc.abstractproperty'
variable-naming-style = 'snake_case'

[tool.pylint.STRING]

check-quote-consistency = 'no'
check-str-concat-over-line-jumps = 'no'


[tool.pylint.IMPORTS]
allow-any-import-level = ''
allow-wildcard-with-all = 'no'
analyse-fallback-blocks = 'no'
deprecated-modules = 'optparse,tkinter.tix'
ext-import-graph = ''
import-graph = ''

int-import-graph = ''

known-standard-library = ''

known-third-party = 'enchant'

preferred-modules = ''


[tool.pylint.CLASSES]
defining-attr-methods = '''__init__,
                      __new__,
                      setUp,
                      __post_init__
'''
exclude-protected = '''_asdict,
                  _fields,
                  _replace,
                  _source,
                  _make
'''
valid-classmethod-first-arg = 'cls'
valid-metaclass-classmethod-first-arg = 'cls'


[tool.pylint.DESIGN]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12

max-locals = 15

max-parents = 7

max-public-methods = 20

max-returns = 6

max-statements = 50

min-public-methods = 2


[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = '''BaseException,
                       Exception
'''
[tool.pylint.basic]

argument-naming-style = "snake_case"

argument-rgx = "[a-z_][a-z0-9_]{2,30}$"

attr-naming-style = "snake_case"

attr-rgx = "[a-z_][a-z0-9_]{2,30}$"

bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]


class-attribute-naming-style = "any"

class-attribute-rgx = "([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$"

class-const-naming-style = "UPPER_CASE"

class-naming-style = "PascalCase"

class-rgx = "[A-Z_][a-zA-Z0-9]+$"

const-naming-style = "UPPER_CASE"

const-rgx = "(([A-Z_][A-Z0-9_]*)|(__.*__))$"

docstring-min-length = -1

function-naming-style = "snake_case"

function-rgx = "[a-z_][a-z0-9_]{2,30}$"

good-names = ["i", "j", "k", "ex", "Run", "_"]

include-naming-hint = true


inlinevar-naming-style = "any"

inlinevar-rgx = "[A-Za-z_][A-Za-z0-9_]*$"

method-naming-style = "snake_case"

method-rgx = "[a-z_][a-z0-9_]{2,30}$"

module-naming-style = "snake_case"

module-rgx = "(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"

no-docstring-rgx = "^_"

property-classes = ["abc.abstractproperty"]

variable-naming-style = "snake_case"

variable-rgx = "[a-z_][a-z0-9_]{2,30}$"


[tool.pylint.classes]

defining-attr-methods = ["__init__", "__new__", "setUp"]

exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]

valid-classmethod-first-arg = ["cls"]

valid-metaclass-classmethod-first-arg = ["mcs"]


[tool.pylint.deprecated_builtins]

bad-functions = ["map", "filter"]


[tool.pylint.design]

max-args = 5

max-attributes = 5

max-bool-expr = 5

max-branches = 8

max-complexity = 10

max-locals = 10

max-parents = 7

max-public-methods = 10

max-returns = 6

max-statements = 30


[tool.pylint.exceptions]

overgeneral-exceptions = ["'builtins.Exception'"]


[tool.pylint.format]

indent-after-paren = 4

indent-string = "    "

max-line-length = 120

max-module-lines = 300


[tool.pylint.imports]

deprecated-modules = ["regsub", "TERMIOS", "Bastion", "rexec"]

known-third-party = ["enchant"]


[tool.pylint.logging]

logging-format-style = "old"


logging-modules = ["logging"]


[tool.pylint."messages control"]

confidence = [

    "HIGH",

    "CONTROL_FLOW",

    "INFERENCE",

    "INFERENCE_FAILURE",

    "UNDEFINED",

]


disable = [

    "redefined-outer-name",

    "missing-function-docstring",

    "missing-module-docstring",

    "import-error",

    "invalid-name",

    "logging-fstring-interpolation",

    "consider-using-assignment-expr",

    "subprocess-run-check",

    "unused-import", # Check and fix by Ruff

    "too-few-public-methods", # Taskweaver plugins usually have few methods

]


enable = [

    "bad-inline-option",

    "file-ignored",

    "useless-suppression",

    "deprecated-pragma",

    "use-symbolic-message-instead",

]


[tool.pylint.method_args]

timeout-methods = [

    "requests.api.delete",

    "requests.api.get",

    "requests.api.head",

    "requests.api.options",

    "requests.api.patch",

    "requests.api.post",

    "requests.api.put",

    "requests.api.request",

]


[tool.pylint.miscellaneous]

notes = ["FIXME", "XXX", "TODO"]


[tool.pylint.refactoring]

max-nested-blocks = 5

never-returning-functions = ["sys.exit", "argparse.parse_error"]


[tool.pylint.reports]

evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"

score = true


[tool.pylint.similarities]

ignore-comments = true

ignore-docstrings = true

ignore-signatures = true

min-similarity-lines = 4


[tool.pylint.spelling]

max-spelling-suggestions = 4

spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"


[tool.pylint.string]


check-str-concat-over-line-jumps = true


[tool.pylint.typecheck]

contextmanager-decorators = ["contextlib.contextmanager"]

ignore-none = true

ignore-on-opaque-inference = true

ignored-checks-for-mixins = [

    "no-member",

    "not-async-context-manager",

    "not-context-manager",

    "attribute-defined-outside-init",

]

ignored-classes = ["optparse.Values", "thread._local", "_thread._local"]

missing-member-hint = true

missing-member-hint-distance = 1

missing-member-max-choices = 1

mixin-class-rgx = ".*[Mm]ixin"


[tool.pylint.variables]

allow-global-unused-variables = true

callbacks = ["cb_", "_cb"]

dummy-variables-rgx = "(_+[a-zA-Z0-9]*?$)|dummy"

ignored-argument-names = "_.*"

redefining-builtins-modules = ["six.moves", "future.builtins"]
